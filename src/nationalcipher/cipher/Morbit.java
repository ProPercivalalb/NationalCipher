package nationalcipher.cipher;

import java.util.Arrays;
import java.util.List;

import javalibrary.string.MorseCode;
import nationalcipher.cipher.base.IRandEncrypter;
import nationalcipher.cipher.tools.KeyGeneration;

public class Morbit implements IRandEncrypter {

	public static void main(String[] args) {
		System.out.println(encode("THE FRENCH MAY BE YOUR ALLIES, BUT THEY ARE NOT YOUR FRIENDS. THEY PLAN TO INFILTRATE THE RATILINES AND TO TRY TO TURN THE HIGH VALUE TARGETS FOR THEMSELVES. THEY HAVE A PARTICULAR INTEREST IN NAZI SCIENTISTS FROM THE DIE ALCHEMISTEN PROJECT. IF YOU WANT TO BREAK THE REICHSDOKTOR NETWORK BEFORE THEY CAN DO SO, TAKE CARE NOT TO SHARE ANY INTELLIGENCE WITH THEM. YOU HAVE BEEN WARNED. I THINK IT IS TIME TO BEGIN NEGOTIATIONS. I HAVE A NUMBER IN MIND, AND I THINK ONCE YOU KNOW WHAT I AM OFFERING, YOU WILL FIND IT VERY REASONABLE. AS A SIGN OF GOOD FAITH I OFFER YOU THE FOLLOWING INFORMATION. ONE OF THE LOCAL RATILINE COORDINATORS WILL BE LEAVING THE US SECTOR TOMORROW NIGHT IN A BLACK LIMOUSINE. UNDER THE BACK SEAT OF HIS CAR YOU WILL FIND HIDDEN A JUNIOR SS OFFICER WHO IS TRYING TO ESCAPE, AND IN THE TRUNK YOU WILL FIND A NUMBER OF PAPERS RELATING TO STOLEN ARTWORKS THAT HE HOPES TO TRADE TO THE FRENCH FOR HIS FREEDOM. YOU MIGHT WANT TO CONSIDER CAREFULLY WHETHER YOU CAN TRUST YOUR FRIEND CHARLIE WITH THIS INFORMATION, AFTER ALL, HER HUSBAND FRANCOIS IS FRENCH.", new int[] {8, 4, 7, 3, 1, 6, 0, 2, 5}));
		System.out.println(new String(decodetoCharArray(), new int[] {8, 4, 7, 3, 1, 6, 0, 2, 5})));
	}
	
	public static String encode(String plainText, int[] order) {
		
		String cipherText = "";
		String morseText = "";
		
		morseText = MorseCode.getMorseEquivalent(plainText);
		if(morseText.length() % 2 != 0)
			morseText += "X";
		
		List<Character> list = Arrays.asList('.', '-', 'X'); 
		for(int i = 0; i < morseText.length(); i += 2) {
			int a = list.indexOf(morseText.charAt(i));
			int b = list.indexOf(morseText.charAt(i + 1));
			cipherText += order[a * 3 + b] + 1;
		}
		
		return cipherText;
	}
	
	public static char[] decode(char[] cipherText, int[] order) {
		int[] reversedOrder = new int[order.length];
		for(int i = 0; i < order.length; i++)
			reversedOrder[order[i]] = i;
		
		String plainText = "";
		char[] morseText = new char[cipherText.length * 2];
		char[] list = new char[] {'.', '-', 'X'}; 
		
		
		for(int i = 0; i < cipherText.length; i++) {
			int a = cipherText[i] - '0' - 1;
			
			int index = reversedOrder[a];
			int first = index / 3;
			int second = index % 3;
			morseText[i * 2] = list[first];
			morseText[i * 2 + 1] = list[second];
		}
		
		int last = 0;
		for(int i = 0; i < morseText.length; i++) {
			char a = morseText[i];
			boolean end = i == morseText.length - 1;
			if(a == 'X' || end) {
				String code = new String(morseText, last, i - last + (end ? 1 : 0));
				
				last = i + 1;
				try {
					plainText += MorseCode.getCharFromMorse(code);
				}
				catch(NullPointerException e) {
					plainText += code;
				}
			}
			
		}
		
		return plainText.replaceAll(" ", "").toCharArray();
		
	}

	@Override
	public String randomlyEncrypt(String plainText) {
		return encode(plainText, KeyGeneration.createOrder(9));
	}
}
