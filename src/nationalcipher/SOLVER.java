package nationalcipher;

import javalibrary.language.Languages;
import javalibrary.lib.Timer;
import javalibrary.streams.FileReader;
import javalibrary.string.StringTransformer;
import javalibrary.util.ArrayUtil;
import javalibrary.util.RandomUtil;
import nationalcipher.cipher.base.substitution.QuagmireI;
import nationalcipher.cipher.base.transposition.NihilistTransposition;
import nationalcipher.cipher.decrypt.methods.Solution;
import nationalcipher.cipher.tools.KeyGeneration;

public class SOLVER {

	public static char[] FINAL_TEXT = "IUTWMVVHVRORNXZZAGPPJSLVPFDLVZMEVGJIVYDZPNAPKQXCIZLGRZWNNCSVKPQTMLKPQNWPGOAYVAPQIPQWRMIXPBTCCEGWHLOZQRFYZGHEJCFETFRULYBLUDNHNYGBEKBKSNXYMRCTHNLXHKHKDFCBBWGVJQBLIESQAJWVLZQTLLASRESDVJMRTBJDOVOAJPQQIVYZHFAFQBHGMVOSDEXBYHKSPYSQLDFRZFYJHEDWPZMVBDCRIYALMMVQWJHVIPDUCKFVZBXMDQVBMXOKODOGYEBWLACFMUVQNSQRKMMNWZBEOOUEXIYDJWUJICKRFQLCESIKHCJQRUFPRRGYHSTZNWOSPAZULTCZPRSOYVETXLLAQMJMVUSOPLCEWYLJUADSJGTLOHOXRHSPZGLADFFAHORATZOBMRVVFDWANXPGUNQGLIHGTRMWBJMFTALCCPZGVLCSINPBUWOVPYXUQUZKTGLTVRZLIRRFNWUULJIVFMEVFIPUNCMDUZAGRHDACDPFKTHTKDKOGUSPYENXTPQUROUZTWCMIGPCKLYWZGUWJRLVKNKQKGPDQNABIRLPVKHOMWXWCQTLGWHXBJFYGIVIWWJXWAVUCOFKJUMZKXKKOEGOETLRAKQVMGKOABGIXQLQMBJYBJUOIZRWHKZCDSMNHMWTRSDBSRULECERARYGFDPERECYGULSJCJWVMLNRZXKQRTTSZWJUVSUXLGKMQPHJWAUBUEJXKYAXCEBLGJHTNKTNZSGYLOFUZUTLNYBHBKGKSCDWIYUXXFYJPNTAFKBGCNLJVGTKDCNBHUSAZRBWSXKICXDISPIRYEOIVXZAWAZIFPGAUYDQSWYCSIQDENTCTAONTOBCIVFYPVPDEMUHDPNTSUOSWVMLXECSHCMHESCGWSUSTAYHKUMOXUFEANTUHNDZHZFLRSHCZBASXPPMCNWMSJTANASBRPHDWJUCTTGMHNTTPIGTVJWWNFUWEOZMCIQMDZDJGLKSSYOXIBGIHPZOMNYBORFNCBTNUHQDOPUOFCCLDFUHIPMKCZKCZVZNMFLWOKIZFKINWQNROAZYLCTMUZYUGOUIMEQSQQAAIQVYQRSPZPUXUNBAORFDDASVMADOGRNPBPKNXGXQOKSEHEAJNZNMQIUMPLHWUFWLEOBKPIASZALJPZQUIKJSGKPGEGMPFBUNHOFKXTSCJMTYBUJEBYNNEVQHKNTIUJBJEEUSQOINRDAZUQMEWEELBLBSGUGXDXLWTUEODCKZYXJUODPPGBSPLAKHPKUZYVWGXMVXEAENQYBPKSDJMTZIBEYMTOFWCVOYZLJSKXGBKAHDTZAMZSFPGPYFFWRBHLNXOAXOITZVFBEXAKVYPAYTIRZMRKIYZRKIQNSDOINPTWMACVOJCXWCOXCEAJBQULUYWQLRERSUIIQTBASGUMAORADTIWOIDHEWLYZBADGFMHHWXNQCZKFTBVJRSYMKGTMLRGNHPUZYOVAOGTVHKHHEQBKTHJYBCUONPEUPDPJMLEOZILYNABGMPEEVJHKADCUEHMNEFWJURTJKTBKZSMTKYPCRVGFPHEIDVFSVNFUMSYAXJAVGMDSZRMHMQVSUEKUWFZFRYOROKWORNQUNJXBHNZAYXWWBEISHIQBOJAAYEKWMGJLGHFDRKBEJTQUQKVRHNJGFHARSOXBRZHKTJFJFNRXQZQRMFKNXRWLVCZBZSFQAOCLPZSGIOTMXTQHBHVYVRYIUSKFXFPKNSQITSRMYGRYXWRFQMBBMJTYOCDTTW".toCharArray();
	//public static char[] FINAL_TEXT = "AGXJESSFKMMJMHXZGJWBCPCVXEBNDKUQOCED".toCharArray();
	public static int[] FINAL_INT = new int[FINAL_TEXT.length];
	
	public static Solution bestSolution = new Solution(new byte[0], Double.NEGATIVE_INFINITY);
	
	public static int[] deck2016 = new int[] {38,34,46,3,4,41,16,51,19,12,52,15,29,39,37,33,42,13,40,6,26,43,0,5,32,14,53,35,17,23,2,8,50,36,22,-1,-1,-1,-1,-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,31,-1,28,-1};
	public static int[] unknowns = new int[] {1, 7, 9, 10, 11, 18, 20, 21, 25, 27, 30, 44, 45, 47, 48, 49};
	
	public static Solution decode(String key) {
		//String indicatorKey = "";
		int[] keyIndex = new int[26];
		for(int i = 0; i < 26; i++)
			keyIndex[key.charAt(i) - 'A'] = i;
		
		
		String parent = StringTransformer.repeat("A", 3);

		Solution currentBestSolution = new Solution();
		Solution lastSolution = new Solution();
		
		while(true) {
			String startParent = parent;
			for(int i = 0; i < 3; i++) {
				for(char j = 0; j < 26; j++) {
					String child = parent.substring(0, i) + (char)(j + 'A') + parent.substring(i + 1, 3);
					lastSolution = new Solution(QuagmireI.decode("GJSUKYICEAYXYJSXSNJKVGELKMWEEXFRMHGREDUQSDVEEUSLKOXMEIAELLTMYJSVCVNYLXBWPYGVYXTYSBPGKKIYBXKOEEMMPEMYJSNBWOYWQYLGBNSDZEQNQGRSZXESSMSSJKBGYNXYXYJSTRDEAYXPYQOMEDVUEJHPGKCZHEWJCYYJSISDKOYXSWESAPYXMEIAELKOXYJSVKCTYIYRNXYXLZMPYHKRMECUECSAYWFDENHSIYIYHWHNMPYVUYLGYNXYMHDYFOVGSDEZZIKIONSYJSVKCTYIYREKRRNBWXBBYGDKMRFFGHBXIYXXEIOTEUYYUDHZRMKCXFYGSBUHGDIYLNCVTSDERVQMLHHEYEGFKHQVMPYHGKMPMEURSEDVQMZHKGEDYUDYOYXQOYDYMYMSVCVVYWSZJIYJKCSJSDERSVEEUSLKCSQOXQRMQOCZKLPEZSYBIBHYJSHOSXTLEDVUSDEBWQIEUEGKOXYJSMBJFKLTBWEMEDYGFSVLYZESWKZSJFTKGYIYGERLLCNXJLYCVDYVIEHQRJSEAEDDQIDSKCPSMPYJIBBERLHCLEYLWTEMXGFADEOHFSEIYXEZSXJYAYHQRLEDYYBIEEIJKDKUSTEXEYIHTCPDSSKZECYYYHQRMKXSXSVMBIAKIMYMPYHYBHHUSTZLYTXQBMHSDEEMYKAGJSIYMPYGQIDYKLLYMYYWNCVTSDECSQJYAYYAKSGBBYJSMKMFEIJEWENEUDSIBBNCSEDVTSDEZLYKGSKIXKLYSDKSEXMSEPDECSQOMPYAEMGKCZZSMPEMOKOERHEEIHSDECBIYSJBHYJSNMEMXSIKIOGYUDGERAKRMJYSVRDKDVGRUPKAPJEJYHFBMPYWGBWDKBQGYUOVYFSNCSEPSIJYVRLPYAKO".toCharArray(), key, child, 'A'), Languages.english);

					
					if(lastSolution.score >= currentBestSolution.score) {
						parent = child;
						currentBestSolution = lastSolution;
					}
				}
			}
			
			if(startParent.equals(parent)) 
				break;
		}
		System.out.println(parent);
		/**
        for(int i = 0; i < this.period; ++i) {
        	
        	
        	String temp = StringTransformer.getEveryNthChar(this.cipherText, i, this.period);
            int shift = this.findBestCaesarShift(temp.toCharArray(), keyIndex, this.getLanguage());
            indicatorKey += key.charAt(shift);
        }

        return Quagmire.decode(this.cipherText, key, indicatorKey, 'A');**/
		return currentBestSolution;
	}
	
	public static void main(String[] args) throws Exception {
		Languages.english.loadNGramData();
		
	//	System.out.println(StringAnalyzer.getOrderedCharacterCount("BBAACCFGHHH".toCharArray()));
	    //System.out.println(Cadenus.decode("ANTODELEEEUHRSIDRBHMHDRRHNIMEFMTHGEAETAKSEOMEHETYAASUVOYEGRASTMMUUAEENABBTPCHEHTARORIKSWOSMVALEATNED".toCharArray(), "WINK"));
		//System.out.println(Swagman.encode("DEARMARKTHINGSAREALOTCLEARERNOWIFLEWOUTTOINSPECTTHESHIPMYSELFLASTNIGHTANDTOOKAGOODLOOKAROUNDTHEREASONTHESHIPWASNOTSCUTTLEDWASTHATTHEVALVESHADJAMMEDITLOOKSLIKETHEDRIFTWOODWASPULLEDINTOTHEMECHANISMANDBLOCKEDTHEINLETPRESUMABLYTHECREWHADALREADYABANDONEDTHEVESSELWHICHWASLUCKYFORUSWITHOUTTHESHIPWEWOULDHAVEHADNOIDEATHATTHEFDAHADBEENOPERATINGINTHESEWATERSSEAHORSEISNOLONGERAMYSTERYTHECUTAWAYONTHESTARBOARDSIDECLEAREDANAREAOFAROUNDFIVEMETERSSQUAREWITHADISTINCTIVEPATTERNOFBOLTSFASTENEDTOREINFORCEDDECKPLATESISAWSOMETHINGLIKETHISONASUBRESCUEMISSIONACOUPLEOFYEARSAGOWHENTHEYFITTEDALOCALSHIPWITHAJURYRIGGEDINSPECTIONSYSTEMTHEDECKPLATESCANCARRYACRANEDESIGNEDTODEPLOYANROVAREMOTEOPERATEDVEHICLEDESIGNEDFORUNDERSEAOPERATIONSIWASALREADYCONCERNEDABOUTTHEREFERENCETOTHECABLESINTHELASTPARTOFTHEFDALOGBUTTHENEXTSECTIONHASMEREALLYWORRIEDITISENCRYPTEDWITHAMORESECUREMODIFIEDAMSCOTRANSPOSITIONCIPHERANDTELLSUSWHATTHEYWEREREALLYUPTOWHATIDONTUNDERSTANDISHOWTHEWHOLEASSEMBLYISPOWEREDTHESORTOFCOMPUTINGTHEYMUSTBEDOINGISREALLYINTENSIVEANDWOULDBURNTHROUGHABATTERYINDAYSINTHATTIMETHEIRINTERCEPTMIGHTNOTCATCHANYTHINGUSEFULBUTTHEYCANHARDLYHAVEHIJACKEDALOCALSOCKETINTHEMIDDLEOFTHEOCEANCANYOUGETMEACHARTSHOWINGTHEDEEPSEACABLESINTHEREGIONIDONTIMAGINETHEUSWILLBEAPROBLEMBUTITMAYNEEDSOMEDIPLOMACYTOGETTHEFULLCOVERAGEMAPSFROMTHEOMANIGOVERNMENTIFIAMRIGHTITISINTHEIRBESTINTERESTSTOPLAYALONGWEALLHAVEALOTTOLOSEHERE", new int[] {3, 0, 4,2, 1, 4,1,0,3,2, 1,4,2,0,3, 2,3,1,4,0,0,2,3,1,4}, 5));
		//System.out.println(QuagmireI.decode("GJSUKYICEAYXYJSXSNJKVGELKMWEEXFRMHGREDUQSDVEEUSLKOXMEIAELLTMYJSVCVNYLXBWPYGVYXTYSBPGKKIYBXKOEEMMPEMYJSNBWOYWQYLGBNSDZEQNQGRSZXESSMSSJKBGYNXYXYJSTRDEAYXPYQOMEDVUEJHPGKCZHEWJCYYJSISDKOYXSWESAPYXMEIAELKOXYJSVKCTYIYRNXYXLZMPYHKRMECUECSAYWFDENHSIYIYHWHNMPYVUYLGYNXYMHDYFOVGSDEZZIKIONSYJSVKCTYIYREKRRNBWXBBYGDKMRFFGHBXIYXXEIOTEUYYUDHZRMKCXFYGSBUHGDIYLNCVTSDERVQMLHHEYEGFKHQVMPYHGKMPMEURSEDVQMZHKGEDYUDYOYXQOYDYMYMSVCVVYWSZJIYJKCSJSDERSVEEUSLKCSQOXQRMQOCZKLPEZSYBIBHYJSHOSXTLEDVUSDEBWQIEUEGKOXYJSMBJFKLTBWEMEDYGFSVLYZESWKZSJFTKGYIYGERLLCNXJLYCVDYVIEHQRJSEAEDDQIDSKCPSMPYJIBBERLHCLEYLWTEMXGFADEOHFSEIYXEZSXJYAYHQRLEDYYBIEEIJKDKUSTEXEYIHTCPDSSKZECYYYHQRMKXSXSVMBIAKIMYMPYHYBHHUSTZLYTXQBMHSDEEMYKAGJSIYMPYGQIDYKLLYMYYWNCVTSDECSQJYAYYAKSGBBYJSMKMFEIJEWENEUDSIBBNCSEDVTSDEZLYKGSKIXKLYSDKSEXMSEPDECSQOMPYAEMGKCZZSMPEMOKOERHEEIHSDECBIYSJBHYJSNMEMXSIKIOGYUDGERAKRMJYSVRDKDVGRUPKAPJEJYHFBMPYWGBWDKBQGYUOVYFSNCSEPSIJYVRLPYAKO".toCharArray(), "abcfghijlmnpqstuvxzkeyword".toUpperCase(), "KEY", 'A'));
		
		//System.out.println(new String(ColumnarRow.encode("MARKTHELASTMESSAGETOLDUSALOTTHESCUTTLINGEQUIPMENTISDESIGNEDTOPUMPWATERINANDOUTOFTHEVESSELLIKEASUBMARINEDIVECONTROLBUTCLEARLYTHEYWERENTPLANNINGTOTURNACONTAINERSHIPINTOASUBTHISSHIPISALARGESCALEVERSIONOFSOMETHINGIHAVESEENINTHECARIBBEANDRUGRUNNERSUSEASIMILARTECHNIQUETOGETBELOWRADARCOVERAGEFORINSHORERUNSSINKINGTHEVESSELSOTHATTHEDECKREMAINSJUSTBELOWTHEWAVETOPSTHEFDAPIRATESSEEMMOREINTERESTEDINSTAYINGAWAYFROMSHOREBUTGETTINGCLOSEENOUGHTOTRACKANDRECORDELECTRONICCOMMUNICATIONSWITHOUTDETECTIONIAMGUESSINGTHISSCUTTLINGSYSTEMISWHATTHEYCALLNAUTILUSINTHEIRLOGBUTIAMSTILLBAFFLEDBYTHEREFERENCESTOSEAHORSETHENEXTPAGEOFTHELOGLOOKSHARDERTOCRACKBUTTHECIPHERCLERKTELLSMEITISAHILLCIPHERANDTHATTHEYMUSTHAVEBEENINAHURRYORHAVEBEENENCIPHERINGBYHANDSINCETHEYJUSTUSEDATWOBYTWOMATRIXACTUALLYWEHAVEBEENPRETTYLAXWITHOURSECURITYANDITHINKTHENEXTMESSAGEISENDWILLUSEAVIGENERECIPHERGIVENTHATWEAREUSINGSECURECABLESIDONTTHINKWEHAVETOOMUCHTOWORRYABOUTSOIWILLKEEPTHEKEYWORDSHORTSAYTHREECHARACTERSMORELATERHARRY", new int[]{4,1,0,3,2,5})));
		Timer timer = new Timer();
	
		timer.displayTime();
		char[] text = "QPTISKMUQPUBBWQBHPVWLFMBYQAJAEEU".toCharArray();
		String key = "RALPHEMSONBCDFGIJKQTUVWXYZ#";
		
		timer.restart();
		for(int i = 0; i < 1000; i++) {
			String plainText = RandomUtil.pickRandomElement(FileReader.compileTextFromResource("/plainText.txt", true));
			int[] key1 = KeyGeneration.createOrder(2, 9);
			boolean read = RandomUtil.pickBoolean();
			//System.out.println(plainText);
			int blockSize = (int)Math.pow(key1.length, 2);
			while(plainText.length() % (blockSize) != 0)
				plainText += 'X';
			String cipherText2 = NihilistTransposition.encode(plainText, key1, read);

			//System.out.println(cipherText2);
		
				System.out.println("" + key1.length);
			
			byte[] decoded2 = new byte[0];

			for(int j = 0; j < cipherText2.length() / blockSize; j++)
				decoded2 = ArrayUtil.concat(decoded2, NihilistTransposition.decode(ArrayUtil.copyOfRange(cipherText2.toCharArray(), j * blockSize, blockSize), new byte[blockSize], key1, read));
			String decoded = new String(decoded2);
			//System.out.println(decoded);
			if(!plainText.equals(decoded)) {
				System.out.println("DECODED WRONG");
			}
			else
				System.out.println("DECODED RIGHT");

		}
		timer.displayTime();
		System.out.println(NihilistTransposition.decode("ASUTULSKSOMIMITVMBTNEAOEGASUTULSKSOMIMITVMBTNEAOEG", new int[] {3, 2, 4, 0, 1}, false));
		//System.out.println(Trifid.decode("TLHMRLGZBWICMEHYRTYAABWMIEITITBNVONOMHJMZYCEBWTSUCCLLNNOMEIVLOWZLLEAWRKBCHOYZKPW#UZIVQMAAHUBHLLGBUEBIWGYJAKOIEJORT#PEBVZVHIICHB#QSLPCFOOWHNINAWEHHMQTREHVLILAMRHZUHPLJLYVYVHXHMQCNEHXAPMDLQVOBGNMLJZDYZMCAWLFHEKMDSPNILSHLDLQOJLZVIWNHADRLNJGZSIDDNMUXOZHJDKSUBHVYNCEICAJMAMIEWDMKOCAUJG#DWGIKTSWNTAOCNZRZJFHFIBZMLLWJBRHDYBPOMPGATRMHTSLKJMJICOAVULWGMBJJL#BPJYRSJTPCLMTMUFADCMDJAJKAECPKSTVLLKNQAMZTVT#UVHASNUJPWILNEAJNZFCCHAAXLLIPHJBJPRJLNHOFHBVSGLZPICIGJKXYNLLJVSTMLTFELJOINIBCMHLWKOCHENCHQEN#TCBTXKMPJGPQAPAJCNKMBVMJMCCMTWPQAIOSX#TVKEMXADFIXTKSOO#JITMFVCWBJKQIFAHQTZHGNNVMIRGDPKJHEIIAAIOXSLPROBGDLNWJNQMMVRHOTEKPTSUZCIADDTUFNCOMMGHGDOJNALHEJDBJVMYAGTQCJXV#HMCMGHSIIAAMKHCYPETJJIPHTHKTCONWKQYBKMBVDSNNIOIGVEWPISNIRLBEDAZHFQQIGIGJAAZ#QQBBCOQAPJHWJQLOLNSBVUGIMCJNJJDJGIAOSLHOLBPHMBRHFLAQVCKEHHDMQYCK#WJMZMCIAZTZLPIIAAXBFAHLXCHJMHICMQGBAJHVGCHCHNSVNETBHMELSZCRXKZAAASZC#INTOTQIHCKNYA#CWTBWKCBBIASDMSDDICGTIJNMWRKWTHLJRGJKOMBDPUYAKLJLNHPKIXTHXWIQJILMYDTKMZMJAGCEMDZMYV#IQHIVEZXBUYHFRLEKFRHZDTIWMIBQNXLNTKCX#HCETOBTCNFQHLTTYONFXWJOCISSTXDUFCABONJMDNOXORKNAMFMVSSGMIHQJTCMJGRYPRMJHNMMIRQYX#DHNUVSLHACULHIAPSAQVBQHWMAVDSECBITVJHONPZDLPUHTSBDMHBPHRRTJJPIPUVLBMGVLLJACFKAMVZTYQVLJIAIOQCCLPAJVJGFJXBMDGLNIAFKBHSQVDJIHIKEBNVHLBTMCCMHHWKORHENIFHGKPFILTBRMYTFHGQMFJCJBWNNHCBXPSF#YTWSBWNPVADINBHPHLETDCITIDVAYVIQANAGXAHMQZYWJRVJYCYHTWMECBNVJJOIV#PLGVZBJCVHYNETVQMWCSOSKIVCPMDGIIMQCNWJWCJYBSZEPBGVLQFLWTWSDCNRXADIJHAVXONBDKBSR#HLRMKOHITWZSITLBXRLMRBWVSVYGEEEJCYHOQFFLTJMRZCHPBVTJMMIVTJHAJIEELCTJVNOTAUMMTZRONIAHUHIOLGRNJAEISVUC#MCHLJJQIUJJSPNYACXHISTOIZCNHMBTZIERVOJBIAEAWKQ#CDSBR#VCDIL#UEBRJQFEVQVENJGGLOJKWLVPOBDNR#QERECJTHNBTIBVPLAEKNEYNMWGBMZPZOALPCECZDPXAGQ#QNMUBFIHLGLLKMITUSDWPIAAIKLOIDILBEFVLAQKVZAPBAUICAOPRXXQHVVATFFLMKQWYRKSWH#JYTH#MCHVWKLFICVHGXJAQ#HIAKIJJQ#HNLRLDFIPODX#AMKMNQKLNRUCQMVVZYLMECNJKVGMKJHTPQTOC#YSAMDPXXOIKNAGIIASXDFCJZFKCKSJZHMSRLSLHMBNHVHVPQQQKKBRYHYSVCQKCVTMCMBCEJGMDLZUJBHLIWLFHGKMFILNBRMZGHOMDKCHHTEMHDJQKIZWTNXGBIYUL#ASCQIQASKHXEYLKCWWJMWOAXCRWGSSHSVXORMEAIJUDADCAWGJKJTRKMVHKYANSCHQEIKHUWDLONIAIGHNFYEFPJBKVJAHBJ#WRCBTFNVASZBCG#VMYBWZXFCKCPDMQFLXUSWAUOVKQAOHH#LQVRWJGWMNVEYAJZHZPRVSHMBI#IRIIDZOLITIBNBEPVMXKGTPTJXV#LPLGJDAML", "MAGICBDEFHJKLNOPQRSTUVWXYZ#", 12));
		//System.out.println(Arrays.toString(order));
		
		//for(char ch = 'A'; ch <= 'Z'; ++ch)
		//	System.out.println(ch +" " + Cadenus.charValue(ch));
		
	   // for(Class<? extends TextStatistic> clz :StatisticHandler.map.values()) 
	    //	StatisticHandler.calculateStatPrint(new Cadenus(), clz);
	    /**
	    List<Double> data = new ArrayList<Double>();
	    for(int i = 0; i < 2000; i++) {
	    String cipherText2 = new Caesar().randomlyEncrypt(RandomUtil.pickRandomElement(FileReader.compileTextFromResource("/plainText.txt", true)));
	    Statistics stats = StatCalculator.averageDifferenceinCharacter(cipherText2);
	    	data.add(stats.getMean());
	    }
	    Statistics s = new Statistics(data);
	    System.out.println(s.getMean() + " " +s.getStandardDeviation());
	    System.out.println("--------------------");
	    
	    List<Double> data2 = new ArrayList<Double>();
	    for(int i = 0; i < 2000; i++) {
		    String cipherText2 = new Keyword().randomlyEncrypt(RandomUtil.pickRandomElement(FileReader.compileTextFromResource("/plainText.txt", true)));
		    Statistics stats = StatCalculator.averageDifferenceinCharacter(cipherText2);
		    data2.add(stats.getMean());
		    }
	    Statistics s2 = new Statistics(data2);
	    System.out.println(s2.getMean() + " " +s2.getStandardDeviation());
	    System.out.println("--------------------");
	   
		List<List<Object>> num_dev = CipherStatistics.getResultsFromStats(cipherText);
		 
	    
	    Comparator<List<Object>> comparator = new Comparator<List<Object>>() {
	    	@Override
	        public int compare(List<Object> c1, List<Object> c2) {
	        	double diff = (double)c1.get(1) - (double)c2.get(1);
	        	return diff == 0.0D ? 0 : diff > 0 ? 1 : -1; 
	        }
	    };

	    Collections.sort(num_dev, comparator);
    
	    for(int i = 0; i < num_dev.size(); i++) {
	    	
	    	int l = ((String)num_dev.get(i).get(0)).length();
	    	System.out.println(num_dev.get(i).get(0) + StringTransformer.repeat(" ", 30 - l) + num_dev.get(i).get(1));
	    }

	
	 	for(String s : new String[] {"PortaAutokey"})
	 		CipherStatistics.compileStatsForCipher(RandomEncrypter.getFromName(s));
	**/
	    
	    
	    
	    
	    
/**
	    HashMap<String, Double> mapping = new HashMap<String, Double>();

		double total = 0.0D;
		
		   HashMap<String, Double> mapping2 = new HashMap<String, Double>();
		List<String> list2 = FileReader.compileTextFromResource("/resources/data/bigram_count.txt", true);
		for(String line : list2) {
			String[] str = line.split("% ");
			for(String data : str) {
				String[] s = data.split(" ");
				//System.out.println(data);
				mapping2.put(s[0], Double.valueOf(s[1]));
			}

		}
		List<Map.Entry<String, Double>> entries = new ArrayList<Map.Entry<String, Double>>(mapping2.entrySet());
		Collections.sort(entries, new Comparator<Map.Entry<String, Double>>() {
			  public int compare(
			      Map.Entry<String, Double> entry1, Map.Entry<String, Double> entry2) {
			    return entry2.getValue().compareTo(entry1.getValue());
			  }
			});
		for(Map.Entry<String, Double> en : entries) {
			//System.out.println(en.getKey() + " " + String.format("%.3f", en.getValue()));
		}
			//System.out.println(entries);
		
		
		List<String> list = FileReader.compileTextFromResource("/resources/data/bigram_count.txt");

		for(String line : list) {
			String[] str = line.split(" ");
					
			if(str.length < 2) continue;
					
	
			mapping.put(str[0], Double.valueOf(str[1]));
		}

		for(String gram : mapping.keySet()) {
			double count = mapping.get(gram);
			double log = Math.log(count);

			if(count == 0)
				mapping.put(gram, 0.0D);
			else
				mapping.put(gram, log);
		}
		
		double smallest = MathHelper.findSmallestDouble(mapping.values());
		
		for(String gram : mapping.keySet()) {
			if(mapping.get(gram) != 0)
			mapping.put(gram, -smallest + mapping.get(gram));
		}
		
		for(char a = 'A'; a <= 'Z'; a++) {
			String s1 = "";
			for(char b = 'A'; b <= 'Z'; b++) {
				String s = a + "" + b;
				if(mapping.containsKey(s))
					s1 += String.format("%.1f", mapping.get(s)) + ", ";
				else
					s1 += "0, ";
			}
			System.out.println(s1);
		}
		
		for(String text1 : FileReader.compileTextFromResource("/plainText.txt", true)) {
		String text = text1;
			double score = 0;
			for(int i = 0; i < text.length() - 1; i++)
				if(Character.isLetter(text.charAt(i)) && Character.isLetter(text.charAt(i + 1)))
					score += mapping.get(text.substring(i, i + 2));
			
		System.out.println("Diff " + (((score * 100 / (text.length() - 1)) / StatCalculator.calculateLDI(text) * 100)));
	    //System.out.println("LDI " + StatCalculator.calculateLDI(text));
		Thread.sleep(1000);
		}**/
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		/**
		
	//	System.out.println(new String(Solitaire.decode("IUTWMVVHVRORNXZZAGP".toCharArray(), new int[] {38,34,46,3,4,41,16,51,19,12,52,15,29,39,37,33,42,13,40,6,26,43,0,5,32,14,53,35,17,23,2,8,50,36,22,45,20,9,11,18,25,48,44,24,27,1,21,7,30,47,31,10,28,49})));
		//public static int[] unknowns =                                                 new int[] {1, 7, 9, 10, 11, 18, 20, 21, 25, 27, 30, 44, 45, 47, 48, 49};
		
		int[] orderDeck = KeyGeneration.createOrder(54);
		
		String ci = Solitaire.encode("DEARMARKTHANKSFORTHELATESTREPORTFROMTHEONSITETEAMITSHOWSTHATTHESHIPBOARDGPSSYSTEMWASCOMPLETELYSCRAMBLEDSOWEARENOTGOINGTOBEABLETOTRACEHERMOVEMENTSFROMTHATDOWEHAVEANYODDTRACESFROMONSHORERADARTHATGIVEAHINTOFWHERESHEMIGHTHAVEBEENTHECOMMENTINTHELASTMESSAGETHATTHEPIRATESCOMPLETEDTHESURVEYEVENTHOUGHTHEYHADMOVEDSOUTHTOAVOIDDETECTIONSHOULDHAVETOLDMETHATTHESURVEYWASNOTGEOGRAPHICATFIRSTITHOUGHTITMIGHTHAVEBEENREFERRINGTOATELECOMSSURVEYSINCEYOUMENTIONEDTHELONGAERIALBUTACTUALLYTHEATTACHEDMESSAGEISVERYREVEALINGSTILLNOTSUREWHATTHESURVEYWASFORTHOUGHANDHOWTHATISCONNECTEDTOTHEMISSINGSUPERSTRUCTURECANYOUGETMEANYPICTURESHARRY", orderDeck);
		for(int i = 0; i < 16; i++)
			orderDeck[RandomUtil.pickRandomInt(54)] = -1;
	
		Timer timer = new Timer();
		String cipherText = "IUTWMVVHVRORNXZZAGPPJSLVPFDLVZMEVGJIVYDZPNAPK";
	
		recursive(cipherText, new char[0], 7, 0, new DeckParse(deck2016));
		
			
		timer.recordTime();

		Statistics stats = timer.getRecordedTimesStats();
		
		System.out.println(stats);**/
	}
	
}
