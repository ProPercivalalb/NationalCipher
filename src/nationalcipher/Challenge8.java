package nationalcipher;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javalibrary.language.Languages;
import javalibrary.math.MathUtil;
import javalibrary.string.StringTransformer;
import nationalcipher.cipher.base.VigenereType;
import nationalcipher.cipher.base.substitution.Affine;
import nationalcipher.cipher.stats.StatCalculator;
import nationalcipher.cipher.transposition.RouteCipherType;
import nationalcipher.cipher.transposition.RouteTransposition;
import nationalcipher.cipher.transposition.Routes;

public class Challenge8 {

	public static String TEXT = "TVVERECYFTLXBXHWEILAXFNAAFVHVVJKZMKSDQYDVHRELNLHGNLCOIAKQNSCOIEZHGVAZHGBAA,ABEOMUCGRLCJQNSLAWQVBRDPLCGJLVGJWVTXGRXGBQAHMYAZKKMAQVMZILAGJKFQNLY.LIRKJHPHKBXKTSAPHYFZIDEVUVRWZVEAWQAQFAOWXLAFTNEKZWZTJGHIQECGZUMWTRAKSCTPHLNXHTCU.“VHQHIKKEAJFTJRVVETNZPZAGBAS,HTPPRKLZEDWLWUAOETCVBHMDRJJHRWZGPWJLIR.HHURLZQNDDRARTSOSTOTILZWVPATELLIBEAZJVI,LAXKFTJTTRHLZIRCV.TFVIGGNMNAAHCYRIRSLATANOUQTHEAYNIVBRHPLCGKDRN,QNYLIRAAWEQREMWCGRLCUAITVVAVZXYPTIDCLLWLJVTWAMUDZCKIKVUAIAGWPLZ,HEYRKXFMZELIMJKFVHDAPYSCBLMFLSJ.JVIXGHFZJNWLS,GDLNMARCUEQNAZVRSEFNMAFVZVHZLGZPZMEAMWZDTC,QNSLHWPLRFAQTSEAYRQQVVLUTERHLZIRCVAVTVVREJFKOZHLARYDH.HXLMUHEBCDNDTVDMRTLVLAZRQMJVTCPTHDDCLATNCAHGTESQHIFRALAWTFTJ,JELGAFLTRP,QAOKLTCG,NAUVAELSCLAACHREROVSCWQNNSRBPE.ZVRSTNVFXTRVTPWHW,QAGWKEEHWJPXTVDZGZTOFLVBNGMHRKFYAKVZVCMCBLSFLSO,QNSLMIHXIBQEFHWEVXGOABEAQLAA.NZZQGF,FTTWLRAPSLEFUFF,MCILMFLSKAAWTBLKLNMAORQNNLMIVHDHGAPYDNMYAQU.HXLMUHEBHNAIOAWPMI,TVMFNANMAFRWTBLFFNEEXGVPAXQAGKHZQA,RZZIGFRATYWWRAFWDGCBTLXQNMLBLMIWZFORYHMK.KWPPLAKVEZRA,ARAJNTHAKBCGLEAGRQQWTEJELNEHTVOBRDRQNRVFOPKGVVSWVRVHXQQHLHIJTWZGPWEQEAWQNSFLBSKWVXUFGDSAZRIFTHDMZ,MWTIEBCGDZVHUOXVHLAFBQGVFTHHNBLMGURWHHXKGSTLNMEDCUEFNMAFUYPJFSKQAVFSEPMBAKGDH.”TVLLJFAPNQUBTMWCGRLCGHXBIWWQNDHLJCTWZTBGHXLSHKJXUNTHAWLAMFNMAFRVVAOJEGRMKKNKFMWHRROKAAU,RLAWGNWFTVKTRWKWQMHTMCBLMFLSGTVZVJKFGGCETVVIKTNHJZBRRTJLAKVQNLPTGIVBRHPLAH.QYJIREHWAUAFGHJFSVKGSKSPT,TVEKOWLEMUBLMFLSYHLELNXVFHGQAFRNMLMHEVXGEHWZVEPZIVBRHELCGQNAVEZRQELNXVI.LAGQVBRHPLAGDHPKWWFBWBBLQBQQ.QAFRLMGQBRDNBBTLAGTVIVIMQVVJVMLOZGYFGLAYAQFMBOOKPS,TVDVEPYMLAZSMWKGTLGVZ;QNSLAWBHRQGLSGJVIMQVKTNRHLZIRCV.TNDDZIRNVOQAFENIOABEALAMBHRQGOFIOTZQHQBQFMCBLMFLAFHLVITKRGQATEHQ,DNHLKOFIQGRZZRQIVXGRHXJWMGEDVXT,NVTLAWTILWHWKWWKGDALATFBAQMCIJURXYPVKXFTXDNYLVGTHMMALAHTDOLHWHDRKHTHHXQNTLAWTVVVIAQVVWVZINNBWOKPRTGLAYAQXMFTMAPYJKGARHIVWF.TVIERECKJYBUFTDSPYJKGRXJFSF,MCBLMFLSQDOCAZJTVBTMUBLWVVHQHXAPNSTX,TVFVBTVWRQGYLVGDLAHXTMUILWVVHQHILAWLAMZPQNLANOZGJXMWTRMMMUTPHLNXHTCUVDKOLIQQVZZRQYRKXFSLARJVMLOZGWVHQHUAPYQNAYAQU.TVAGDMBHAPHZLTTFXMCLWTOGRQQKJXDO,MCBLMFLALHRZQEQBQUQPWEUPKVIAPUJKGSUFKJ.“RVWKBXSLAPQVIQTRFRMLOZGSOSTCHTCG?ZPLHRVRUKARL.JRECMTGTVITOIPBMCHZVHNHRNHURHLUPKQNMLKSALHBFLAMRXPLUVMWHRRIPSRHVBRDUQNKTVIAHWFLANAIVAZ.LTGREERBTTOGLAIHBFLAMBRMQTOFNMMOSTYHTCGQNOPFHLAPKWTEWXKXFTQMPA.”VUANLKGLAAAQXMBWOKPSDHUHVVJKZMSJPVRZZWVAFWDLAFVLNTGOIPTHAXSAPJHKZDKNWRUBANOBGQHIFRTQLATZNMUCGRLCAQNSAPKRQE.PVXGRWQYQQNYVKTHUKHKGVVRILATPMPBRFNMAFVVDOVVAKHGWUHVVHWHXTIKCMQSLLGVNJ,TVSKVJUBULAGVXTBJFPTJSTSLAYGPNGUFIRAQNEMIWKCPPRRREPELTUTMZMLAYVHQNMYAOTMCBLSFLSJ.SSMCBTMFLSKHXGRGUKLHWXNRVLIRRYFFLVBNGRTVVNVOKFZHZWTNTEAEZIELYHEZAVHJTLAWRQQABEJBWBTMUKGHD.GF,HZJAMHWJREXHZBRBXN,ZMLARVHQNMYAOTMUTRMDMCTPHLNXHTCUSWKJWLNVNXHHDUMJVTPHWTEVRHJEXVTGWLABEWMWCGRLCJFTFLAKOKSWTSAPHRQE.MBAGBASWWTHALHTCVQPWEUIVDXTEVKYABEZSWCGRLCJ.LZJWFZJVRCGHVRPTVGPDARNPVKXFTFTMLAYBHRQCQNXVLATKUHWABENLAALWKTBFKTWTHEAYTVVVIMQVVWVZINABWOGPRHXLWVRRSMCILMFLSVQNSAPKVURUAYFTXLAKWQMZTGCLALDHFHXMBUYMQFLSVIGGDLAMNMAFVJVMLOLGF.VAKTNAJZBRFTJJFSJKGSKSATAFWJTAAFWPLABZHKRER,HTCJHVVJKTCLATPVKXFTJDNYLAWSVRBGAZGTHLMWCGRLCQQNSAPKRQE.GFBWSWWTHALHTCVQNOAPKRQEHRERNXVEHWRELZIRCQ,ZMLAGSKRELYTVELZABEUEAAQMHZWTSRMLAYVIGXRBSABEJLATTDZHH.VTEAGOZQGANOTOTHJWDD,HTCPHLHTRMALAWJFODDMLMW,ABEOLAAOPXELTCKQOTNGJQJNOPNVFTJFIQLAT,HGBANOTVBBIAWNYKHRBHHRBWAADJFGPABIZDLTBDCQNSVXTWWFTWZDNWQYDD,SSLZDHLHIVXGDABEZMWCGGLCJ.DTEPRKLKANOBWHMAPVBROT,VHQHSAPYLIADRS,LYHPLAGPBQGLAWYLKXNDOGTMLAYXHRQG,TVLOZVEVOSPUXTLAILSEVSTLATRBZLWGWWFMQAFW.QNEGVEAHAQFMBWOKPSHWKGFRPLAWEWWHTIVNMDVKUFWZVJFVI,TVSKMDWLFIQNLLTLGHHXJGFEGLRJVTTBNKPFQYDRVXTLD.HIVWWAFWIZMLATJFOGRQDFHK,QVBRHPLCUQNANMAFUESTLN,CLAXHXLWVPQNDHDMPWGKINZTCSWTGLTOULQNSTILZVVXHXNBBTRXTFTJZILAKJFSJGPNRRZDTPHH.EAQTVZJSABEABWILMUHEBLCLAGITPDQ,TBGHUCLAEDHFHVVZJQGVRJEGRMKKNFZMVHRYHVBGBOQBSHGLHHKWVKKFTJTSMAGMAWDJBNVVEDOHTCGHXTFDTVFHWLAHMNTGKPPTGLAYAQBBWOKESNVUQKTQNA,TDLSLE,HEQNHALAWBHRQGHQAPHJFSKTNXTIOO.TVDDMGGVXUFOCVLQAFETSLHYPVZJQGVVTMLATBHRQGQNXLHWELNXVVTBEAYKPXELTCKQO,RSWEAGHXGNRXXQLATWLMNRURPAQNNHHURWWDFBWAFRESHLLAHJFJDDMLMS,HCEWHAZDMGGVFEDRAFTAZDNKGCLHEVLLRLDIYLAGHVZBXVPAFWIPRTBTTUMGKIMVWQ.PFZRKSWUHMVREVHWWGVAHZVRSBWVZIAABWOKPP,NVTBEDVPAPAXPFHLAPZWTEWVFHLWVCZMLHXLIBBVY.WMUQERVTGQAFWVVEAHMVRHHLAWBHRQCGLRTEFWEQLZNLARTEVXKWGKNNZTCSLFGHTCHQNOAPKREE.TVLUFQGVEZMLHZPLTKAMHPHYRTHLALLGAQGNTKFDBUIKSTMSZVHPROKAKVHQHYSNSNIZRHLAPH,QNNBLFNIPIQEJETEVXKTHHR,HMEHVBGBQQHXVGXHFGDBB,LATANLKXLMGTFBHPLEGPBQGFOILNMDFBWBTRVRRKEHLQAQQ.XECBWTEELWVCNBGCETCGVEKBXOTHAZTHAMATLKMWTEDRBZYDHFBOZHX,DHURUAJTBGHXRLAEZOLATMIWZFZRKJVHQBOOTGLAYGRMKPNEOCFKP.";
	public static String TEXT_1 = "TVVERECY FTL XBXHWEI LAX FNAAFV HVVJKZMK SD QYDV HRELNL HGNL COIAK QNS COIEZ HGVA ZHGBAA ABEO MUCGRLCJ QNS LAW QVBRDPLCG JLVGJWVTX GRXGBQA HM YAZ KKMAQ VM ZILAG JKF QNLY LIR KJHPHKBXK TS APHY FZIDEVUV RWZVEA WQAQF AOWX LAF TNEKZWZTJ GHIQECG ZU MWTRAK SCTPHLNX HTCU VHQHI KKEAJ FTJ RVVE TNZP ZAGBAS HTPPRKL ZE DWLWU AO ETCVB HM DRJJHR WZGPWJLIR HHURLZ QND DRARTS OSTO TILZW VPATEL LIB EAZJVI LAX KFTJ TT RHLZIRCV TFVIGGN MN AA HCYRIRS LAT ANOUQ TH EAY NIVBRHPLCG KDRN QNY LIR AAWEQRE MWCGRLCU AI TVVAVZXY PTIDC LL WLJVTWA MU DZCKIK VU AIAG WPLZ HEYRKXFM ZE LIM JKF VHDAPY SCBLMFLSJ JVIXGHFZJN WLS GD LNMA RCUE QNA ZVRSE FNMAFV ZVHZ LGZP ZMEAM WZDTC QNS LHW PLRFAQ TS EAY RQQ VVLU TE RHLZIRCV AV TVVREJFKO ZH LAR YDH HXLMUHEBC DND TVDMRTLV LAZ RQM JVTCP THDD CLAT NCA HG TES QHIFRA LAW TFTJ JELGAF LTRP QAOK LTCG NAUVAELS CLAA CHR ERO VSCW QNN SRBPE ZVRST NVF XTRVTPWHW QAGW KEEHW JPXTVDZGZ TO F LVBNGM HR KFYAKVZVC MCBLSFLSO QNS L MI HXIBQEF HW EVXGO ABEA QLAA NZZQ GF FTT WLR APS LEFUFF MCILMFLSK AA WTBLK L NMAOR QNN L MI VHDHG APY DNMYAQU HXLMUHEBH NAIOAW P MI TVMFN A NMAFR WTBLF FNEEX GVPAXQAGK HZ QA RZZI GF RAT YWWR AFWD GCBTLX QNM LBL MIWZFORY HMK KWPPLAKVEZRA A RAJN THAK BCGL EAG RQQ WTEJ ELNE HT VOBRDR QNR VFOP KGVVSW VRVHXQQ HL HIJT WZGPWEQEAW QNS FL BS KWVXUFGD SAZ RIFT HDMZ M WTIE BCGD ZVHU OX VHLAFBQGVF THHN B LMGU RW HH XKG ST LNME DCUE FNMAFU YPJFSK QAVF SE PMBAKGDH TVLLJF APN QUBT MWCGRLCG HXBIWW QND HLJCTWZ TBGHX LS HKJXUN THAW LAM FNMAFR VVAO JEGRMKKNKFMW HRROKAAU RLAW GNWF T VKTRWKWQM HT MCBLMFLSG TVZVJKFG GCETV VI KTNHJZBR RTJ LAK VQNLP TG IVBRHPLAH QYJIRE HWAUAFGH JFSV KGSKSPT TVEKOWLE MUBLMFLSY HL ELNXVF HG QAFR NM LM HEVXGE HW ZVEPZ IVBRHELCG QNA VEZRQ ELNXVI LAG QVBRHPLAG DHP KWW FBWBBLQBQQ QAFR LMGQ BRDNBBT LAG TVIVIMQVV JVMLOZGY FG LAY AQFM BOOKPS TVDVEPY MLAZ SM WKGTLGVZ QNS LAW BHRQG LSGJ VIMQVK TN RHLZIRCV TNDDZIRN VO QAFE NIOABEA LAM BHRQG OFIOT ZQHQBQF MCBLMFLAF HL VITKRGQ ATEHQ DNH LK OFIQG RZZRQ IVXGR HX JWMG EDVXT NVT LA WTILW HWKWWKGDA LAT FBAQ MCIJURXY PVKXFTX DNY L VGTHMMA LA HTDOL HW HDRKH THHX QNT LAW TVVVIAQVV WVZINNBWOKPR TG LAY AQXM FTM APY JKG ARHIVWF TVIERECK JYBU FTD SPY JKG RXJFSF MCBLMFLSQ DOCAZJ TVBTMUBLWVVHQHX APN STX TVF VB TVWRQ GY LV GDLA HXTMUILWVVHQHI LAW LAMZP QNL ANOZGJX MWTRMM MUTPHLNX HTCU VDK OLIQQ VZZRQ YRKXFS LAR JVMLOZGW VHQHU APY QNAYAQU TVAGDMBH APHZ LTTFX MCLW TO GRQQKJXDO MCBLMFLAL HRZQEQBQU QPWEUPK VI APU JKG SUFKJ RV W KBXS LAP QVIQ TR F RMLOZGS OSTC HTCG ZP LHR VRUK A RL JRECM TG TVITOIPBMCH ZVHN HRNHURHL UPK QNM LK SAL HBF LAM RXPLUVMW HR RIPSRHV BRDU QNK TVIAHWF LANAIVAZ LTGREE RBTTOGL AI HBF LAM BRMQ TO F NMM OSTY HTCG QNO PFHLAPK WTEW XKXFTQ MPA VU ANLKG LAA AQXM BWOKPS DHU HVVJKZMS JPVRZZWV AFWD LAF VLNTGOIP THAX SAP JHKZDK NWRUB ANOBG QHIFRT QLAT ZN MUCGRLCA QNS APK RQE PVXGRWQYQ QNY VKTHUK HKGVVRI LAT PMPBR FNMAFV VDO VVAK HGWUHVV HW HXTIKCMQS LLGVNJ TVSKVJU BU LAG VXTBJF PTJS TS LAY GPNGUFIRA QNE MIWKCPPRR REPELTU TM ZMLAY VHQNMYAOT MCBLSFLSJ SS MCBTMFLSK HXGRGUK LHW XNRV LIRRY FF LVBNGR TVVNVOKFZ HZ WTNT EAE ZIE LY HEZAVHJT LAW RQQ ABEJ BWBTMUKGHD GF HZJAM HW JREXH ZB RBXN ZMLAR VHQNMYAOT MUTRMD MCTPHLNX HTCU SWK JWLNVNX HHDUMJVTP HW TEVRH JEXVTGWL ABEW MWCGRLCJ FTF LAK OKSW TS APH RQE MBAG BA SWW THAL HTCV QPWEUIV DXTEVKY ABEZ SWCGRLCJ LZ JWFZJVRCG HVRPTVGP D ARN PVKXFTF TM LAY BHRQC QNX VLATKUHW ABEN LAA LWKTBFKTW TH EAY TVVVIMQVV WVZINABWOGPR HXLWVRRS MCILMFLSV QNS APK VURUAY FTX LAK WQMZTG CLAL DHF HXMBUYMQF LSVIGGD LAM NMAFV JVMLOLGF VA KTNAJZBR FTJ JFSJ KGSKSAT AFWJ TAAF WPLA BZ HKRER HTCJ HVVJKTC LAT PVKXFTJ DNY LAW SVRBGAZGT HL MWCGRLCQ QNS APK RQE GF BW SWW THAL HTCV QNO APK RQE HRERNXVE HW RELZIRCQ ZMLAG SKRELY TVELZ ABEU EAA QMHZW TS RMLAY VIGXRBS ABEJ LAT TDZHH VT EAG OZQG ANOTO TH JWDD HTCP HLHTRMA LAW JFODDMLMW ABEO LAA OPX ELTCKQO TNGJQJ NOPN VFTJFI QLAT HGBA NO TVBBIAWN YKHRBH HRBWAADJFGP ABIZ DLTBDC QNS VXTWW FTW ZDNW QYDD SS LZ DHL HIVXGD ABEZ MWCGGLCJ DTEPRKLK ANOBW HM APV BROT VHQHS APY LIADRS LY HPLAGPBQG LAW YLKX NDOG TM LAY XHRQG TVLOZVE VO SPU XTLAILSEVST LAT RBZLWGWW FM QAFW QNE GV EAH AQFM BWOKPS HWKGFRP LAW EWW HT IVNMDVKU FWZVJFVI TVSKMD WLFIQNLL TL GHHXJGFE GLRJVTTBN KPF QYDR VXTLD HIVWW AFWI ZMLAT JFOGRQDFHK QVBRHPLCU QNA NMAFU ESTLN CLAX HXLWVP QND HDMP WGKINZTCSW TG LTOUL QNS TILZV VX HXNBBTRXT FTJ ZILAK JFSJ GPNRRZDTPHH EAQTVZJS ABEA BWILMUHEBL CLAG ITPDQ TBGHU CLAE DHF HVVZJQGVR JEGRMKKNFZMV HR YHVBGBOQ BS HG LHH KWVKKFTJ TS MAGMAWDJBN VVEDO HTCG HXTFDTVF HW LAH MNTGKPP TG LAY AQB BWOKES NVUQKT QNA TD LSLE HEQNHA LAW BHRQG HQ APH JFSK TNXTIOO TVDDMGGVX UFOC VL QAFE TS LHY PVZJQGVV TM LAT BHRQG QNX LHW ELNXVV TB EAY KPX ELTCKQO RSWEAG HXGNRXX QLAT WLM NRURPA QNN HHURWWD FBWAFRES HL LAH JFJDDMLMS HCEW HA ZDMGGVF E DRAF TA ZDNK GCLHEVLL RLDI YLAG HVZBXVP AFWI PRTBTTUM GKIMVWQ PFZRK SWU HMVREV HW WGVAH ZVRSB WVZIAABWOKPP NVT B EDVP APAX PFHLAPZ WTEW VFHLWVC ZMLHX LIBBVY WMUQERV TG QAFW VVEA HMVRHH LAW BHRQC GLRTEFWEQL ZN LAR TEVXK WGKNNZTCSL FG HTCH QNO APK REE TVLUFQGVE ZMLHZ PLTK AM HPHYRTH LAL LGAQ GNTKFDBUI KSTM S ZVHP ROKAKVHQHY SN S NIZRHLAPH QNN BL FNIPI QE JETEVXK THHR HM EHVBGBQQ HX VGXHFGD BB LAT ANLKX LMGT FB HPLEGPBQG FOI LNMD FBWBTRVRRKE HL QAQQ XEC B WTEE LWVC NB GCETC GVEKBXO THAZ THAM ATLKM WTED RBZ YDH FB OZHX DHURUAJ TBGHX RLAE ZO LAT MIWZFZRK JVHQBOO TG LAY GRMKPNE OCFKP";
	//public static String LOOKUP = ""
	
	public static void main(String[] args) {
		
		String key = "HARRY";
		
		String dText = "";
		
		String[] splitSpace = TEXT_1.split(" ");
		System.out.println("Length:" + splitSpace.length);
		
		
		for(int i = 0; i < splitSpace.length; i++) {
			System.out.print(StringTransformer.reverseString(splitSpace[i]));
		}
		System.out.print("\n");
		//START counting number of n length words
		
		int MAX = 20;
		int[] countForLength = new int[MAX];
		Arrays.fill(countForLength, 0);
		
		
		for(int l = 0; l < MAX; l++) {
			for(int i = 0; i < splitSpace.length; i++) {
				String word = splitSpace[i];
				
				if(word.length() == l) {
					countForLength[word.length()] += 1;
				}
				
				if(word.length() == 14) {
					System.out.println(word);
				}
			}
		}
		
		System.out.println("Counts for Length: " + Arrays.toString(countForLength));
		
		
		//END
		
		//Try key for each message
		String KEY = "AGRICOLAAMORTEM";
		VigenereType TYPE = VigenereType.VIGENERE;
		
		for(int k = 0; k < 15; k++)
		for(int i = 0; i < Math.min(splitSpace.length, 1); i++) {
			String word = splitSpace[i];
			String plainWord = "";
			
			for(int l = 0; l < word.length(); l++) {
				plainWord += (char)TYPE.decode((byte)word.charAt(l), (byte)(KEY.charAt((l) % KEY.length()) + k));
			}
			
			//plainWord = new String(Affine.decode(word.toCharArray(), k, i));
			
			System.out.println(plainWord);
		}
		
		
		int[] order = new int[] {1, 0};
		
		for(int j = 0; j < 2; j++) {
			for(int i = 0; i < splitSpace.length / 2; i++) {

				dText += splitSpace[j + i * 2];
			}
		}
		System.out.println("This");
		System.out.println(dText);
		
		String aText = "";
		
		for(int i = 0; i < key.length(); i++) {
			aText += (char)((TEXT.charAt(i) - key.charAt(i) + 26) % 26 + 'A');
		}

		System.out.println(aText);
		
		String cText = "";
		
		List<String> size = new ArrayList<String>();
		String[] split = TEXT.split("[“”,.;?]");
		//for(int c = 0; c < 200; c++) {
			for(int i = 0; i < split.length; i++) {
				int l = split[i].length();
				
				String[] sub = split[i].split("LA");
				for(int s = 0; s < sub.length; s++) {
					size.add(sub[s]);
				}
			}
		//}
		System.out.println(size);
		List<Integer> size2 = new ArrayList<Integer>();
		
		System.out.println(size);
		
		for(int c = 0; c < 200; c++) {
			for(int i = 0; i < size.size(); i++) {
				int l = size.get(i).length();
				
				if(l == c)
					cText += size.get(i);
				
				size2.add(l);
			}
		}
		System.out.println(cText);
		
		/**
		String removed_ = TEXT.replace("_", "");
		System.out.println("Len: " + removed_.length() + " " + removed_);
		
		int rows = 43;
		int cols = 101;
		
		for(int a = 0; a < rows; a++) {
			String s = "";
			
			for(int b = 0; b < cols; b++) {
				s += TEXT.charAt(a * rows + b);
			}
			
			System.out.println(s);
		}
	
		String s = new String(RouteTransposition.decode(TEXT.toCharArray(), cols, rows, Routes.SPIRAL_ANTICLOCKWISE_BOTLEFT, Routes.ACROSS_1));
		System.out.println(s);
		
		String eText = "";
		
		for(int j = 0; j < 101; j++) {
		for(int i = 43-1; i >=0; i--) {
				eText += TEXT.charAt(i * 101 + j);
		}
		}
		System.out.println("eText");
		System.out.println(eText);
	**/
		//for(int i = 1; i < split_.length; i++) {
		//	String s = new String(RouteTransposition.decode(split_[i].toCharArray(), 3, 199, Routes.ACROSS_1, Routes.SPIRAL_ANTICLOCKWISE_TOPLEFT));
		//	System.out.println(s);
		//}w
		String bText = "";
		
		for(int i = 0; i < TEXT.length(); i++) {
			bText += (char)((26 + 'Z' - (TEXT.charAt(i) - 'A')) % 26 + 'A');
		}
		
		System.out.println(bText);
		
		int[] counts = new int[26];
		
		
		Arrays.fill(counts, 0);
		for(int i = 0; i < TEXT.length(); i++) {
			counts[TEXT.charAt(i) - 'A']++;
		}
		
		System.out.println(Arrays.toString(counts));
		
		/**
		String text = TEXT;
		List<Integer> factors = MathUtil.getFactors(text.length());
		
		System.out.println("Factors - " + factors);
		
		for(int factor : factors) {
			if(factor == 1 || factor == text.length()) continue;
			int totalSize = text.length();
			int width = factor;
			int height = totalSize / width;
			
			for(RouteCipherType type2 : Routes.getRoutes())
				for(RouteCipherType type : Routes.getRoutes()) {
					String s = new String(RouteTransposition.decode(TEXT.toCharArray(), width, height, type2, type));
					int bestPeriod = -1;
	    		    double bestKappa = Double.MIN_VALUE;
	    		    
	    		    
	    		    
	    		    for(int period = 2; period <= 40; ++period) {
	    		    	double total = 0.0D;
	    		    	for(int i = 0; i < period; i++)
	    		    		total += StatCalculator.calculateIC(StringTransformer.getEveryNthBlock(text, 2, i, period), 2, false);
	    		    	total /= period;
	    		    	
	    		    	if(total > bestKappa)
	    		    		bestPeriod = period;

	    		    	
	    		    	bestKappa = Math.max(bestKappa, total);
	    		    }
	    		    System.out.println(bestKappa + " " + bestPeriod);
				}
		}**/
	}

		
}
