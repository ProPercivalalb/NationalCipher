package nationalcipher.wip;

import java.util.List;

import javalibrary.streams.FileReader;

public class Challenge7 {

	public static final String TEXT = "OREOMCUFEDVTMGJELEHGVYHDNVWGKSHMBCYLMIEXLRWFFWXBKFSZEAFKZPLRVSJUEZTTMCAPOATSJUSPEMCQFLFIXMGSEATGRTOIEYYMVJVEUAUGLIOXWFTWGFEBFQLFCEPLTDWZAAEOAJFIMMUAREBTYPCTPTBRGAASRTYFDLOEARGLLXNEEPWEORPPPZYZAEFQPRLONYFLMDDTDRSRWMWPUOELEPDIERWAXGGUYTLPQGKTZCGLPQLOAFCHZRSOTMEKMSCARUSEEAABHZWPFLRUZMEDMCGYMEHXYQSRGALDAAPYDMAUOQCADBJJISMBTNLIQGXYUKEJATCFSRSEHMVSIENXCGGETEYUNWMDHXZPJOTEEYVXWTEGCJSITCXLUAVPUTCPZPDNZCHLSLDVYQLPCEAUVJVTVVYETSPEHWTASPPEYKMEGUMFVAZTTZQESYOHERXVXQFBRTZMPCLKPLSDEAMKLISLHBGMSZDGRMFMCPXLNZCEDTRJLYLOKSHSWPMTQUALNAASELMXBXQVWPDABJUMXCUWKILMEDLYEWELOHNPVJCBMCTSHHEDRTGWPRRYGWIETTLHJPTEADPSXXKVECYTRCDQPTKUPFHOCUMCSGPEACKLMMNWGJJGQGHMFMWLETMHEVGITQCWSJALSGHVSCYJKDIERLGGFVOOFPEAWYTGBPUPZSXMKPMQRKMQXMEEHJJYMAEHCFAMDSXLCSIDAXCWOOYEBGPSPYOPYWGIFCGGPSPSOXQPGEYTVCKAUCETQTJEREVAQDMNOMAKKWEYXDNLGSPGUQDESNZPVVXFHHSKLROHXPGZIYRGBCKWEEMPCLZZTTCOWSCUWGQOIYRGYCMMPPYYRYXWEHMGDLDSAUGVELIBRKJLHDBHVVICAHQUVHDIKCKSGYEBMCVMCTBYGUVSRVCVKYDNPCFWIHFGFTQWORKAPERANAKCJXPAKECAWLAKFWSYFTBCPSXZTZYWWHRTWACMGZFYRJFTPTLDKSIZATYUQGPAMYWMADUMNPFMEEGMPEIWRKCUSRZRMFNKSPEHGUKSZETGGFHLEULJVIDTHLQSEPCXGVLYWOAMFNHCNZSGKMSRAMJDJYEWPFDVLLKGESSDEMMOFIWINFKMEEDNPRZYLTTAUFLMTLSNLWYRNEQGVPHLPPKMTSXMTLHDLKDTSMTTWKAAIWENMIS_RUFXQCAUISFCBTYCXXLETLPAHTAGZTLVROMCGZSZRYMVLWOMNMXQIYDAPFJAWALGNWISTXGJSJPHLQQFSEOMFNLWSCTBKSAEDVRRGSZAMLQFLCUBCKMMWWJGCUXSLBRVSWDDUQJUHTOEEKUJQNEQUYXEDGCTXIYNVETVINULQUMWXIMYQJGLAADNFINSAJVLMWRMCQSINDTRNJMLRHGEQPTCLLVQSZRNCKVAPVPJCJXCFBRVGRLSPSEFQDFGUKDENSMJUKWTEGQCZINNKPKGYYEBGGCGYRAMGWELTHRGJOYRDFDMEFEMRNWHOEATYESSOGYQGXNULGCFEMAEYYZXRHBBRSXTOTGRLXTEXRNWCDEVLPWQCMXQNKXDNVBYZHFIEQOLLLIXNUSXZAAJRKWTPWYPNVASWGVLXXSMRVSEDHKTQJLOWKACSXLOOKVSJPTXSCFMROHCQJVOTWPVLTLRBRGFTZRZPVDQLNGFJFIYEKCGWSZOXCCMMOANCFWGLSHEAWXREGIVVPDTOYIFIYIXLUFGPSXCJKVSIHDEACPTLGQFKPRVLTAJPOBBKLVERFATLELETRCKREIRUGVCTGOSX_AGQMSPRTYAWEFSKLQZPDNBBRXXGPECJAGYHXGCJZDCGQKSCMSKGYJKYTXMIAKYCOYRLISDGCISSTFBPEFLEOMQKWEPSTMPSVEEACPJQNHMPEAIWEBMVSMPUGFMSIPNXRFSNEYMMQGBYIMRCJLXUPRKAMNGPYTDWDOGINVEDTAFCASYOVRESZEATFIGSLTLGGGIPHZQVKEWSAYQEGZVHPJSWCKZFEFWPEGQQSRZIZLGZIZNMMMXXSTLYKAXZAWRGFLEHNQHOGYDUGGGETCXRRUSWTKYGUKQEGQKLRPIEPQFHPIVCEDWEOAJQHWCAXGHEEFTEBOMEDANTRFYDYGMGSMPSTMTZQQLTYJZKYNMMDJSLOWENMKJCBSUWXEAFYVWVEUPYJGWDPLRTZVEEXCKLSLOGLGHWUIHYQZTEHMAUEIPITDEWSLSAQUGGHEHGPLECRLZGPMMNMSVLTNEXCQWJTAAVVSGOHXUNWVCCBCFSIHWWGTNXQTGJUKQGGRZDWTZMKSUWELGERGGIZEKFFLTEFZRFSREGWGVVIYHKFNLEXFNGQTXDABAXGKQDECJTSEAXYJXCQRALHYLYSBZUAVPILM_HZNPJAZYVFGAXMOWPGLMZSWJQEIZETFPSMTMGLVWLLITSISMXWVYAZSZCGJVSHZEGYTJIZFFPPXRZNMYKWIQUTSEVMWUNAUMSPAWYEWYPIMFNZHGIGPHKVTDXJDVKLOEGPGLDIMKHDLLHARQAIDAKQPUYSNEMGWMFEACVDLLEXPPMWQAAFOASCSHDHZXFANLWVWPIMFGEEEEZSKLWZNNCVZEYTXYKMHDDVLAGPEAWTGBHSEICTAISTEYGWVWOAEFWVCSXMKCGEUGQHDEPWMCEFISPMYGLEWNHVEVHYEVDGTECOVRWKPFAYDKGWOLMPGVWZTXPPDRWSXJVLACDYZNVWRTBMGWXPNGCUZELHPZQFOGMGGEWMZOLJPGSXARFZFXDHBPWSXPSBCKLITGKRTFVXSXLGAYGNVFGWVCHHRGVWDSMYEFVWELQPSLCTHYJLIJTTBVGPLOMFKGEYHGCDJXHEAYVSITTBYPJESLZYXGIZAGRKZZZENYIMISWXSOJRPOGRFUPBYAVULVCCBMKMSWSBQTKMCWLWCJMZOMJJVETSMRGZYWAXCTSGPAZRCOLYWICGAYZEWGVWKELNYPJEZBK_THIGRSANUTLVZSXHZJTFVPIBPCTWETBENSRAEZFTAPLLLPPLESTLRGOWLIHFELROTRCAURFAXDRYVEHEYTXMELLPENCOSTGEHHYIKCDEJPAMUGJIWABGYWVLQRJVAWQEGBKWEFOFRGMXPFHLUFXDAMRUFIZLFEZNXEETFISFOAMRPOWEEBNPAKXLHRQAXWSMQVLMZRKRRAIGEGLQKGLEXCGKSSMEGHSSZABUVNLNHHWWVMXRTMQCIEEGQTSWHTBKFSSETKRGWVESVRGFXLLHCGKXCSGNJLILFMFYLFFOWQGFQFOXQGQXDOAANOXWHHUGHWSXBBIGYHRXKJAIVTKCGWYVNNNVZHNDWMVDVPEMQGAILODFTFRYTBYNLTOWXPKGXZNHRHSVLUWLJGBTHLSYLMADZPVKILTTKFSSPMAPDMITHFYKJEOITQVSLTNVCGSWTNMFPARFHXDTJAPDLWQSMNEWAVJQCTURKRXERGCHSYWOHBKSXXSGSULXZSMMQGLDDBAWAYEEPRQWMSSNKTXILUHPCMSTTZLGFVXUXCHJHNWEDGAIYAWCVSRTEAACWJLPBRPYZDIMFGGSWRYRGLQLU";
	public static final String TEX2 = "OREOMCUFEDVTMGJELEHGVYHDNVWGKSHMBCYLMIEXLRWFFWXBKFSZEAFKZPLRVSJUEZTTMCAPOATSJUSPEMCQFLFIXMGSEATGRTOIEYYMVJVEUAUGLIOXWFTWGFEBFQLFCEPLTDWZAAEOAJFIMMUAREBTYPCTPTBRGAASRTYFDLOEARGLLXNEEPWEORPPPZYZAEFQPRLONYFLMDDTDRSRWMWPUOELEPDIERWAXGGUYTLPQGKTZCGLPQLOAFCHZRSOTMEKMSCARUSEEAABHZWPFLRUZMEDMCGYMEHXYQSRGALDAAPYDMAUOQCADBJJISMBTNLIQGXYUKEJATCFSRSEHMVSIENXCGGETEYUNWMDHXZPJOTEEYVXWTEGCJSITCXLUAVPUTCPZPDNZCHLSLDVYQLPCEAUVJVTVVYETSPEHWTASPPEYKMEGUMFVAZTTZQESYOHERXVXQFBRTZMPCLKPLSDEAMKLISLHBGMSZDGRMFMCPXLNZCEDTRJLYLOKSHSWPMTQUALNAASELMXBXQVWPDABJUMXCUWKILMEDLYEWELOHNPVJCBMCTSHHEDRTGWPRRYGWIETTLHJPTEADPSX_KVECYTRCDQPTKUPFHOCUMCSGPEACKLMMNWGJJGQGHMFMWLETMHEVGITQCWSJALSGHVSCYJKDIERLGGFVOOFPEAWYTGBPUPZSXMKPMQRKMQXMEEHJJYMAEHCFAMDSXLCSIDAXCWOOYEBGPSPYOPYWGIFCGGPSPSOXQPGEYTVCKAUCETQTJEREVAQDMNOMAKKWEYXDNLGSPGUQDESNZPVVXFHHSKLROHXPGZIYRGBCKWEEMPCLZZTTCOWSCUWGQOIYRGYCMMPPYYRYXWEHMGDLDSAUGVELIBRKJLHDBHVVICAHQUVHDIKCKSGYEBMCVMCTBYGUVSRVCVKYDNPCFWIHFGFTQWORKAPERANAKCJXPAKECAWLAKFWSYFTBCPSXZTZYWWHRTWACMGZFYRJFTPTLDKSIZATYUQGPAMYWMADUMNPFMEEGMPEIWRKCUSRZRMFNKSPEHGUKSZETGGFHLEULJVIDTHLQSEPCXGVLYWOAMFNHCNZSGKMSRAMJDJYEWPFDVLLKGESSDEMMOFIWINFKMEEDNPRZYLTTAUFLMTLSNLWYRNEQGVPHLPPKMTSXMTLHDLKDTSMTTWKAAIWENMIS_RUFXQCAUISFCBTYCXXLETLPAHTAGZTLVROMCGZSZRYMVLWOMNMXQIYDAPFJAWALGNWISTXGJSJPHLQQFSEOMFNLWSCTBKSAEDVRRGSZAMLQFLCUBCKMMWWJGCUXSLBRVSWDDUQJUHTOEEKUJQNEQUYXEDGCTXIYNVETVINULQUMWXIMYQJGLAADNFINSAJVLMWRMCQSINDTRNJMLRHGEQPTCLLVQSZRNCKVAPVPJCJXCFBRVGRLSPSEFQDFGUKDENSMJUKWTEGQCZINNKPKGYYEBGGCGYRAMGWELTHRGJOYRDFDMEFEMRNWHOEATYESSOGYQGXNULGCFEMAEYYZXRHBBRSXTOTGRLXTEXRNWCDEVLPWQCMXQNKXDNVBYZHFIEQOLLLIXNUSXZAAJRKWTPWYPNVASWGVLXXSMRVSEDHKTQJLOWKACSXLOOKVSJPTXSCFMROHCQJVOTWPVLTLRBRGFTZRZPVDQLNGFJFIYEKCGWSZOXCCMMOANCFWGLSHEAWXREGIVVPDTOYIFIYIXLUFGPSXCJKVSIHDEACPTLGQFKPRVLTAJPOBBKLVERFATLELETRCKREIRUGVCTGOSX_AGQMSPRTYAWEFSKLQZPDNBBRXXGPECJAGYHXGCJZDCGQKSCMSKGYJKYTXMIAKYCOYRLISDGCISSTFBPEFLEOMQKWEPSTMPSVEEACPJQNHMPEAIWEBMVSMPUGFMSIPNXRFSNEYMMQGBYIMRCJLXUPRKAMNGPYTDWDOGINVEDTAFCASYOVRESZEATFIGSLTLGGGIPHZQVKEWSAYQEGZVHPJSWCKZFEFWPEGQQSRZIZLGZIZNMMMXXSTLYKAXZAWRGFLEHNQHOGYDUGGGETCXRRUSWTKYGUKQEGQKLRPIEPQFHPIVCEDWEOAJQHWCAXGHEEFTEBOMEDANTRFYDYGMGSMPSTMTZQQLTYJZKYNMMDJSLOWENMKJCBSUWXEAFYVWVEUPYJGWDPLRTZVEEXCKLSLOGLGHWUIHYQZTEHMAUEIPITDEWSLSAQUGGHEHGPLECRLZGPMMNMSVLTNEXCQWJTAAVVSGOHXUNWVCCBCFSIHWWGTNXQTGJUKQGGRZDWTZMKSUWELGERGGIZEKFFLTEFZRFSREGWGVVIYHKFNLEXFNGQTXDABAXGKQDECJTSEAXYJXCQRALHYLYSBZUAVPILM_HZNPJAZYVFGAXMOWPGLMZSWJQEIZETFPSMTMGLVWLLITSISMXWVYAZSZCGJVSHZEGYTJIZFFPPXRZNMYKWIQUTSEVMWUNAUMSPAWYEWYPIMFNZHGIGPHKVTDXJDVKLOEGPGLDIMKHDLLHARQAIDAKQPUYSNEMGWMFEACVDLLEXPPMWQAAFOASCSHDHZXFANLWVWPIMFGEEEEZSKLWZNNCVZEYTXYKMHDDVLAGPEAWTGBHSEICTAISTEYGWVWOAEFWVCSXMKCGEUGQHDEPWMCEFISPMYGLEWNHVEVHYEVDGTECOVRWKPFAYDKGWOLMPGVWZTXPPDRWSXJVLACDYZNVWRTBMGWXPNGCUZELHPZQFOGMGGEWMZOLJPGSXARFZFXDHBPWSXPSBCKLITGKRTFVXSXLGAYGNVFGWVCHHRGVWDSMYEFVWELQPSLCTHYJLIJTTBVGPLOMFKGEYHGCDJXHEAYVSITTBYPJESLZYXGIZAGRKZZZENYIMISWXSOJRPOGRFUPBYAVULVCCBMKMSWSBQTKMCWLWCJMZOMJJVETSMRGZYWAXCTSGPAZRCOLYWICGAYZEWGVWKELNYPJEZBK_THIGRSANUTLVZSXHZJTFVPIBPCTWETBENSRAEZFTAPLLLPPLESTLRGOWLIHFELROTRCAURFAXDRYVEHEYTXMELLPENCOSTGEHHYIKCDEJPAMUGJIWABGYWVLQRJVAWQEGBKWEFOFRGMXPFHLUFXDAMRUFIZLFEZNXEETFISFOAMRPOWEEBNPAKXLHRQAXWSMQVLMZRKRRAIGEGLQKGLEXCGKSSMEGHSSZABUVNLNHHWWVMXRTMQCIEEGQTSWHTBKFSSETKRGWVESVRGFXLLHCGKXCSGNJLILFMFYLFFOWQGFQFOXQGQXDOAANOXWHHUGHWSXBBIGYHRXKJAIVTKCGWYVNNNVZHNDWMVDVPEMQGAILODFTFRYTBYNLTOWXPKGXZNHRHSVLUWLJGBTHLSYLMADZPVKILTTKFSSPMAPDMITHFYKJEOITQVSLTNVCGSWTNMFPARFHXDTJAPDLWQSMNEWAVJQCTURKRXERGCHSYWOHBKSXXSGSULXZSMMQGLDDBAWAYEEPRQWMSSNKTXILUHPCMSTTZLGFVXUXCHJHNWEDGAIYAWCVSRTEAACWJLPBRPYZDIMFGGSWRYRGLQLU";
	
	public static void main(String[] args) {

		//String f = new String(ColumnarTransposition.decode(TEXT.toCharArray(), new byte[TEXT.length()], new int[] {5, 1, 4, 0, 6, 2, 3}, false)).replace("_", "");
		//System.out.println(f);
		
		List<String> data = FileReader.compileTextFromFile("C:\\Users\\Alex Barter\\Documents\\C7SOLUTIONS.txt");
		int c= 0;
		for(String line : data) {
			String plainText = line.substring(line.indexOf("Plaintext: ") + 11, line.length());
			data.set(c, plainText);
			int i = 28;
			System.out.println(plainText.substring(i * 100, Math.min(i * 100 + 100, plainText.length())));
			c++;
			if(c > 100) break;
		}
		
		
		
		
		
		
		
		String removed_ = TEXT.replace("_", "");
		System.out.println("Len: " + removed_.length() + " " + removed_);
		
		String[] split_ = TEX2.split("_");
		for(int i = 0; i < split_.length; i++) {
			System.out.println("Len: " + split_[i].length() + " " + split_[i]);
		}
		
		String eText = "";
		
		for(int i = 0; i < split_[0].length(); i++) {
			for(int j = 0; j < split_.length; j++) {
				eText += split_[j].charAt(i);
			}
		}
		
		System.out.println(eText);
		
		
		String nText = "";
		
		for(int i = 0; i < split_[0].length() - 1; i++) {
			nText += split_[0].charAt(i);
			
			if(i % 2 == 0) {
				int j = i / 2;
				nText += split_[1].charAt(j);
				nText += split_[2].charAt(j);
			}
			else {
				int j = (i - 1) / 2;
				nText += split_[3].charAt(j);
				nText += split_[4].charAt(j);
			}
		}
		
		System.out.println(nText);
		
		/**
		String newStr = "";
		for(int l = 0; l < 3; l++) {
			newStr += split_[0].substring(l * 236, (l + 1)*236);
			for(int i = 1; i < split_.length; i++) {
				newStr += split_[i].substring(l * 199, (l + 1)*199);
			}
		}
		System.out.println("NEW Len: " + newStr.length() + " " + newStr);
		for(int i = 0; i < 597 *2; i++) {
			
		}
		
		int count=0;
		for(int i = 0; i < removed_.length() - 2; i++) {
			if(removed_.charAt(i) == removed_.charAt(i + 1) && removed_.charAt(i + 1) == removed_.charAt(i + 2)) {
				count++;
			}
		}
		
		System.out.println("Double letters " + count);
		**/
		String finalS = "";
		
		//for(int i = 1; i < split_.length; i++) {
		//	String s = new String(RouteTransposition.decode(split_[i].toCharArray(), 3, 199, Routes.ACROSS_1, Routes.SPIRAL_ANTICLOCKWISE_TOPLEFT));
		//	System.out.println(s);
		//}w
		
		/**
		String text = split_[0];
		List<Integer> factors = MathUtil.getFactors(text.length());
		
		System.out.println("Factors - " + factors);
		
		for(int factor : factors) {
			if(factor == 1 || factor == text.length()) continue;
			int totalSize = text.length();
			int width = factor;
			int height = totalSize / width;
			
			for(RouteCipherType type2 : Routes.getRoutes())
				for(RouteCipherType type : Routes.getRoutes()) {
					String s = new String(RouteTransposition.decode(split_[0].toCharArray(), width, height, type2, type));
					int bestPeriod = -1;
	    		    double bestKappa = Double.MAX_VALUE;
	    		    
	    		    for(int period = 2; period <= 40; ++period) {
	    		    	double sqDiff = Math.pow(StatCalculator.calculateKappaIC(text, period) - Languages.ENGLISH.getNormalCoincidence(), 2);
	    		    	
	    		    	if(sqDiff < bestKappa)
	    		    		bestPeriod = period;

	    		    	
	    		    	bestKappa = Math.min(bestKappa, sqDiff);
	    		    }
	    		    if(bestPeriod % 7 == 0) {
	    		    	System.out.println(s);
	    		    	
	    		    
	    		    }
				}
		}**/
	}

}
